SELECT * FROM Customers LIMIT 6;

SELECT email, COUNT(*) FROM Customers GROUP BY email HAVING COUNT(*)>1;
--missing details
SELECT * FROM Customers
WHERE first_name IS NULL
   OR last_name IS NULL
   OR email IS NULL;

--remove duplicates
SELECT customer_id, COUNT(*) FROM Accounts
GROUP BY customer_id HAVING COUNT(*)>1;

--List all customers along with their account details
SELECT c.customer_id, c.first_name, c.last_name, c.email, a.account_id, a.account_type, a.balance, a.opened_date
FROM customers c
JOIN accounts a ON c.customer_id = a.customer_id;

--High value customers
SELECT c.customer_id, CONCAT(c.first_name, c.last_name) AS full_name, SUM(a.balance) as total_balance FROM customers c
JOIN accounts a ON c.customer_id = a.customer_id
GROUP BY c.customer_id, c.first_name, c.last_name 
HAVING SUM(a.balance) > 5000;

--Trascation summary for each account
SELECT account_id, COUNT(*) AS total_transcations,
SUM(CASE
    WHEN transaction_type = 'credit' THEN amount
	ELSE 0 END) AS total_credited,
SUM(CASE
	WHEN transaction_type = 'debit' THEN amount 
	ELSE 0 END) AS total_debited
FROM transactions GROUP BY account_id;

--total balance per branch name
SELECT b.branch_id, b.branch_name, b.branch_manager, SUM(a.balance) AS total_balance FROM branches b
JOIN accounts a ON b.branch_id = a.branch_id
GROUP BY b.branch_id, b.branch_name, b.branch_manager
ORDER BY total_balance DESC;

--total loans issued per branch
SELECT b.branch_id, b.branch_name, SUM(l.amount) AS total_loans FROM branches b
JOIN accounts a ON b.branch_id = a.branch_id
JOIN loans l ON a.customer_id = l.customer_id
GROUP BY b.branch_id, b.branch_name
ORDER BY total_loans DESC;

--risk analysis
--1.identify high risk customers
SELECT c.customer_id, c.first_name, c.last_name, SUM(l.amount) AS total_loans
FROM customers c
JOIN loans l ON c.customer_id = l.customer_id
GROUP BY c.customer_id, c.first_name, c.last_name
HAVING SUM(l.amount) > 50000;

--2.identify those who have due date loans.
SELECT l.loan_id, CONCAT(c.first_name, c.last_name) AS full_name, l.amount, l.due_date FROM loans l
JOIN customers c ON c.customer_id = l.customer_id
WHERE l.due_date > CURRENT_DATE AND l.amount > 0;

--creating indexes
--1.index on customers_table
CREATE INDEX idx_customers_customer_id ON customers(customer_id);

--2.index on Accounts table
CREATE INDEX idx_accounts_customer_id ON accounts(customer_id);
CREATE INDEX idx_accounts_brach_id ON accounts(branch_id);

--3.Index on Branches Table
CREATE INDEX idx_branches_branch_id ON Branches(branch_id);

-- Index on Transactions Table
CREATE INDEX idx_transactions_account_id ON Transactions(account_id);
CREATE INDEX idx_transactions_transaction_type ON Transactions(transaction_type);

--Explain 
EXPLAIN SELECT C.customer_id, C.first_name, C.last_name, C.email, A.account_id, A.account_type, A.balance
FROM customers C
JOIN accounts A ON C.customer_id = A.customer_id;

--STORED PROCEDURES
CREATE TABLE CustomerMonthlyReport (
    report_month DATE NOT NULL,
    customer_id INT NOT NULL,
    total_balance DECIMAL(15, 2),
    account_count INT,
    PRIMARY KEY (report_month, customer_id)
);


CREATE OR REPLACE FUNCTION GenerateMonthlyCustomerReport()
RETURNS void AS
$$
BEGIN
    INSERT INTO CustomerMonthlyReport (report_month, customer_id, total_balance, account_count)
    SELECT TO_DATE(TO_CHAR(CURRENT_DATE, 'YYYY-MM-01'), 'YYYY-MM-DD') AS report_month,
           C.customer_id,
           SUM(A.balance) AS total_balance,
           COUNT(A.account_id) AS account_count
    FROM Customers C
    JOIN Accounts A ON C.customer_id = A.customer_id
    GROUP BY C.customer_id;
END;
$$ LANGUAGE plpgsql;

SELECT GenerateMonthlyCustomerReport();






   
